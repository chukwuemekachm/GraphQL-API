scalar DateTime

type Query {
  info: String!
  getPublishers(sort: PublisherSearchPaginationOrderInput): [Publisher!]!
  getAuthors(sort: UserSearchPaginationOrderInput): [User!]!
}

type Mutation {
  signup(user: SignupInput): AuthResponse!
  login(user: LoginInput): AuthResponse!
  createPublisher(publisher: PublisherInput): Publisher!
  createAuthor(user: AuthorInput!): User!
}

type AuthResponse {
  token: String!
  user: User!
}

input SignupInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

input PublisherInput {
  name: String!
  about: String!
  address: String!
}

input AuthorInput {
  firstName: String!
  lastName: String!
  email: String!
}

input PublisherSearchPaginationOrderInput {
  search: String
  orderBy: PublisherOrderBy
  offset: Int
  limit: Int
}

input UserSearchPaginationOrderInput {
  search: String
  orderBy: UserOrderBy
  offset: Int
  limit: Int
}

enum PublisherOrderBy {
  name_ASC
  name_DESC
  about_ASC
  about_DESC
  createdAt_ASC
  createdAt_DESC
}

enum UserOrderBy {
  lastName_ASC
  lastName_DESC
  firstName_ASC
  firstName_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
}

type Publisher {
  id: ID!
  name: String!
  about: String
  address: String
  publication: [Book!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  books: [Book!]
  reviews: [Review!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Book {
  id: ID!
  title: String!
  description: String
  publishers: [Publisher!]!
  pages: Int
  publishDateTime: DateTime!
  authors: [User!]!
  ratings: [Rating!]
  isbnNo: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Review {
  id: ID!
  review: String!
  reviewer: User!
  book: Book!
  createdAt: DateTime!
}

type Rating {
  id: ID!
  rating: Int!
  rater: User!
  book: Book!
  createdAt: DateTime!
}
