// Code generated by Prisma (prisma@1.24.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  book: (where?: BookWhereInput) => Promise<boolean>;
  publisher: (where?: PublisherWhereInput) => Promise<boolean>;
  rating: (where?: RatingWhereInput) => Promise<boolean>;
  review: (where?: ReviewWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  book: (where: BookWhereUniqueInput) => BookPromise;
  books: (
    args?: {
      where?: BookWhereInput;
      orderBy?: BookOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Book>;
  booksConnection: (
    args?: {
      where?: BookWhereInput;
      orderBy?: BookOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => BookConnectionPromise;
  publisher: (where: PublisherWhereUniqueInput) => PublisherPromise;
  publishers: (
    args?: {
      where?: PublisherWhereInput;
      orderBy?: PublisherOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Publisher>;
  publishersConnection: (
    args?: {
      where?: PublisherWhereInput;
      orderBy?: PublisherOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PublisherConnectionPromise;
  rating: (where: RatingWhereUniqueInput) => RatingPromise;
  ratings: (
    args?: {
      where?: RatingWhereInput;
      orderBy?: RatingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Rating>;
  ratingsConnection: (
    args?: {
      where?: RatingWhereInput;
      orderBy?: RatingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => RatingConnectionPromise;
  review: (where: ReviewWhereUniqueInput) => ReviewPromise;
  reviews: (
    args?: {
      where?: ReviewWhereInput;
      orderBy?: ReviewOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Review>;
  reviewsConnection: (
    args?: {
      where?: ReviewWhereInput;
      orderBy?: ReviewOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ReviewConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createBook: (data: BookCreateInput) => BookPromise;
  updateBook: (
    args: { data: BookUpdateInput; where: BookWhereUniqueInput }
  ) => BookPromise;
  updateManyBooks: (
    args: { data: BookUpdateManyMutationInput; where?: BookWhereInput }
  ) => BatchPayloadPromise;
  upsertBook: (
    args: {
      where: BookWhereUniqueInput;
      create: BookCreateInput;
      update: BookUpdateInput;
    }
  ) => BookPromise;
  deleteBook: (where: BookWhereUniqueInput) => BookPromise;
  deleteManyBooks: (where?: BookWhereInput) => BatchPayloadPromise;
  createPublisher: (data: PublisherCreateInput) => PublisherPromise;
  updatePublisher: (
    args: { data: PublisherUpdateInput; where: PublisherWhereUniqueInput }
  ) => PublisherPromise;
  updateManyPublishers: (
    args: {
      data: PublisherUpdateManyMutationInput;
      where?: PublisherWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertPublisher: (
    args: {
      where: PublisherWhereUniqueInput;
      create: PublisherCreateInput;
      update: PublisherUpdateInput;
    }
  ) => PublisherPromise;
  deletePublisher: (where: PublisherWhereUniqueInput) => PublisherPromise;
  deleteManyPublishers: (where?: PublisherWhereInput) => BatchPayloadPromise;
  createRating: (data: RatingCreateInput) => RatingPromise;
  updateRating: (
    args: { data: RatingUpdateInput; where: RatingWhereUniqueInput }
  ) => RatingPromise;
  updateManyRatings: (
    args: { data: RatingUpdateManyMutationInput; where?: RatingWhereInput }
  ) => BatchPayloadPromise;
  upsertRating: (
    args: {
      where: RatingWhereUniqueInput;
      create: RatingCreateInput;
      update: RatingUpdateInput;
    }
  ) => RatingPromise;
  deleteRating: (where: RatingWhereUniqueInput) => RatingPromise;
  deleteManyRatings: (where?: RatingWhereInput) => BatchPayloadPromise;
  createReview: (data: ReviewCreateInput) => ReviewPromise;
  updateReview: (
    args: { data: ReviewUpdateInput; where: ReviewWhereUniqueInput }
  ) => ReviewPromise;
  updateManyReviews: (
    args: { data: ReviewUpdateManyMutationInput; where?: ReviewWhereInput }
  ) => BatchPayloadPromise;
  upsertReview: (
    args: {
      where: ReviewWhereUniqueInput;
      create: ReviewCreateInput;
      update: ReviewUpdateInput;
    }
  ) => ReviewPromise;
  deleteReview: (where: ReviewWhereUniqueInput) => ReviewPromise;
  deleteManyReviews: (where?: ReviewWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  book: (
    where?: BookSubscriptionWhereInput
  ) => BookSubscriptionPayloadSubscription;
  publisher: (
    where?: PublisherSubscriptionWhereInput
  ) => PublisherSubscriptionPayloadSubscription;
  rating: (
    where?: RatingSubscriptionWhereInput
  ) => RatingSubscriptionPayloadSubscription;
  review: (
    where?: ReviewSubscriptionWhereInput
  ) => ReviewSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PublisherOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "about_ASC"
  | "about_DESC"
  | "address_ASC"
  | "address_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type BookOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "pages_ASC"
  | "pages_DESC"
  | "publishDateTime_ASC"
  | "publishDateTime_DESC"
  | "isbnNo_ASC"
  | "isbnNo_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ReviewOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "review_ASC"
  | "review_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RatingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "rating_ASC"
  | "rating_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface RatingUpdateManyWithoutBookInput {
  create?: RatingCreateWithoutBookInput[] | RatingCreateWithoutBookInput;
  delete?: RatingWhereUniqueInput[] | RatingWhereUniqueInput;
  connect?: RatingWhereUniqueInput[] | RatingWhereUniqueInput;
  disconnect?: RatingWhereUniqueInput[] | RatingWhereUniqueInput;
  update?:
    | RatingUpdateWithWhereUniqueWithoutBookInput[]
    | RatingUpdateWithWhereUniqueWithoutBookInput;
  upsert?:
    | RatingUpsertWithWhereUniqueWithoutBookInput[]
    | RatingUpsertWithWhereUniqueWithoutBookInput;
  deleteMany?: RatingScalarWhereInput[] | RatingScalarWhereInput;
  updateMany?:
    | RatingUpdateManyWithWhereNestedInput[]
    | RatingUpdateManyWithWhereNestedInput;
}

export type BookWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateDataInput {
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
  books?: BookUpdateManyWithoutAuthorsInput;
  reviews?: ReviewUpdateManyWithoutReviewerInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  books_every?: BookWhereInput;
  books_some?: BookWhereInput;
  books_none?: BookWhereInput;
  reviews_every?: ReviewWhereInput;
  reviews_some?: ReviewWhereInput;
  reviews_none?: ReviewWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface BookUpdateManyWithoutAuthorsInput {
  create?: BookCreateWithoutAuthorsInput[] | BookCreateWithoutAuthorsInput;
  delete?: BookWhereUniqueInput[] | BookWhereUniqueInput;
  connect?: BookWhereUniqueInput[] | BookWhereUniqueInput;
  disconnect?: BookWhereUniqueInput[] | BookWhereUniqueInput;
  update?:
    | BookUpdateWithWhereUniqueWithoutAuthorsInput[]
    | BookUpdateWithWhereUniqueWithoutAuthorsInput;
  upsert?:
    | BookUpsertWithWhereUniqueWithoutAuthorsInput[]
    | BookUpsertWithWhereUniqueWithoutAuthorsInput;
  deleteMany?: BookScalarWhereInput[] | BookScalarWhereInput;
  updateMany?:
    | BookUpdateManyWithWhereNestedInput[]
    | BookUpdateManyWithWhereNestedInput;
}

export interface RatingWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  rating?: Int;
  rating_not?: Int;
  rating_in?: Int[] | Int;
  rating_not_in?: Int[] | Int;
  rating_lt?: Int;
  rating_lte?: Int;
  rating_gt?: Int;
  rating_gte?: Int;
  rater?: UserWhereInput;
  book?: BookWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: RatingWhereInput[] | RatingWhereInput;
  OR?: RatingWhereInput[] | RatingWhereInput;
  NOT?: RatingWhereInput[] | RatingWhereInput;
}

export interface PublisherUpsertWithWhereUniqueWithoutPublicationInput {
  where: PublisherWhereUniqueInput;
  update: PublisherUpdateWithoutPublicationDataInput;
  create: PublisherCreateWithoutPublicationInput;
}

export interface BookUpdateWithWhereUniqueWithoutPublishersInput {
  where: BookWhereUniqueInput;
  data: BookUpdateWithoutPublishersDataInput;
}

export interface PublisherScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  about?: String;
  about_not?: String;
  about_in?: String[] | String;
  about_not_in?: String[] | String;
  about_lt?: String;
  about_lte?: String;
  about_gt?: String;
  about_gte?: String;
  about_contains?: String;
  about_not_contains?: String;
  about_starts_with?: String;
  about_not_starts_with?: String;
  about_ends_with?: String;
  about_not_ends_with?: String;
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: PublisherScalarWhereInput[] | PublisherScalarWhereInput;
  OR?: PublisherScalarWhereInput[] | PublisherScalarWhereInput;
  NOT?: PublisherScalarWhereInput[] | PublisherScalarWhereInput;
}

export interface BookUpdateWithWhereUniqueWithoutAuthorsInput {
  where: BookWhereUniqueInput;
  data: BookUpdateWithoutAuthorsDataInput;
}

export interface PublisherUpdateManyWithWhereNestedInput {
  where: PublisherScalarWhereInput;
  data: PublisherUpdateManyDataInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface PublisherUpdateManyDataInput {
  name?: String;
  about?: String;
  address?: String;
}

export interface ReviewSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ReviewWhereInput;
  AND?: ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput;
  OR?: ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput;
  NOT?: ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput;
}

export interface UserUpdateManyWithoutBooksInput {
  create?: UserCreateWithoutBooksInput[] | UserCreateWithoutBooksInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutBooksInput[]
    | UserUpdateWithWhereUniqueWithoutBooksInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutBooksInput[]
    | UserUpsertWithWhereUniqueWithoutBooksInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface PublisherSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PublisherWhereInput;
  AND?: PublisherSubscriptionWhereInput[] | PublisherSubscriptionWhereInput;
  OR?: PublisherSubscriptionWhereInput[] | PublisherSubscriptionWhereInput;
  NOT?: PublisherSubscriptionWhereInput[] | PublisherSubscriptionWhereInput;
}

export interface UserUpdateWithWhereUniqueWithoutBooksInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutBooksDataInput;
}

export interface UserUpdateManyMutationInput {
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
}

export interface UserUpdateWithoutBooksDataInput {
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
  reviews?: ReviewUpdateManyWithoutReviewerInput;
}

export interface ReviewUpdateManyMutationInput {
  review?: String;
}

export interface ReviewUpdateManyWithoutReviewerInput {
  create?:
    | ReviewCreateWithoutReviewerInput[]
    | ReviewCreateWithoutReviewerInput;
  delete?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput;
  connect?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput;
  disconnect?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput;
  update?:
    | ReviewUpdateWithWhereUniqueWithoutReviewerInput[]
    | ReviewUpdateWithWhereUniqueWithoutReviewerInput;
  upsert?:
    | ReviewUpsertWithWhereUniqueWithoutReviewerInput[]
    | ReviewUpsertWithWhereUniqueWithoutReviewerInput;
  deleteMany?: ReviewScalarWhereInput[] | ReviewScalarWhereInput;
  updateMany?:
    | ReviewUpdateManyWithWhereNestedInput[]
    | ReviewUpdateManyWithWhereNestedInput;
}

export type PublisherWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ReviewUpdateWithWhereUniqueWithoutReviewerInput {
  where: ReviewWhereUniqueInput;
  data: ReviewUpdateWithoutReviewerDataInput;
}

export interface UserUpdateOneRequiredWithoutReviewsInput {
  create?: UserCreateWithoutReviewsInput;
  update?: UserUpdateWithoutReviewsDataInput;
  upsert?: UserUpsertWithoutReviewsInput;
  connect?: UserWhereUniqueInput;
}

export interface ReviewUpdateWithoutReviewerDataInput {
  review?: String;
  book?: BookUpdateOneRequiredInput;
}

export type RatingWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface BookUpdateOneRequiredInput {
  create?: BookCreateInput;
  update?: BookUpdateDataInput;
  upsert?: BookUpsertNestedInput;
  connect?: BookWhereUniqueInput;
}

export interface UserCreateOneWithoutReviewsInput {
  create?: UserCreateWithoutReviewsInput;
  connect?: UserWhereUniqueInput;
}

export interface BookUpdateDataInput {
  title?: String;
  description?: String;
  publishers?: PublisherUpdateManyWithoutPublicationInput;
  pages?: Int;
  publishDateTime?: DateTimeInput;
  authors?: UserUpdateManyWithoutBooksInput;
  ratings?: RatingUpdateManyWithoutBookInput;
  isbnNo?: Int;
}

export type ReviewWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface BookCreateOneWithoutRatingsInput {
  create?: BookCreateWithoutRatingsInput;
  connect?: BookWhereUniqueInput;
}

export interface BookUpsertWithoutRatingsInput {
  update: BookUpdateWithoutRatingsDataInput;
  create: BookCreateWithoutRatingsInput;
}

export interface RatingUpdateWithWhereUniqueWithoutBookInput {
  where: RatingWhereUniqueInput;
  data: RatingUpdateWithoutBookDataInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface RatingUpdateWithoutBookDataInput {
  rating?: Int;
  rater?: UserUpdateOneRequiredInput;
}

export interface RatingUpdateInput {
  rating?: Int;
  rater?: UserUpdateOneRequiredInput;
  book?: BookUpdateOneRequiredWithoutRatingsInput;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface PublisherCreateManyWithoutPublicationInput {
  create?:
    | PublisherCreateWithoutPublicationInput[]
    | PublisherCreateWithoutPublicationInput;
  connect?: PublisherWhereUniqueInput[] | PublisherWhereUniqueInput;
}

export interface ReviewWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  review?: String;
  review_not?: String;
  review_in?: String[] | String;
  review_not_in?: String[] | String;
  review_lt?: String;
  review_lte?: String;
  review_gt?: String;
  review_gte?: String;
  review_contains?: String;
  review_not_contains?: String;
  review_starts_with?: String;
  review_not_starts_with?: String;
  review_ends_with?: String;
  review_not_ends_with?: String;
  reviewer?: UserWhereInput;
  book?: BookWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: ReviewWhereInput[] | ReviewWhereInput;
  OR?: ReviewWhereInput[] | ReviewWhereInput;
  NOT?: ReviewWhereInput[] | ReviewWhereInput;
}

export interface UserCreateManyWithoutBooksInput {
  create?: UserCreateWithoutBooksInput[] | UserCreateWithoutBooksInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface RatingCreateInput {
  rating: Int;
  rater: UserCreateOneInput;
  book: BookCreateOneWithoutRatingsInput;
}

export interface ReviewCreateManyWithoutReviewerInput {
  create?:
    | ReviewCreateWithoutReviewerInput[]
    | ReviewCreateWithoutReviewerInput;
  connect?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput;
}

export interface PublisherUpdateManyMutationInput {
  name?: String;
  about?: String;
  address?: String;
}

export interface BookCreateOneInput {
  create?: BookCreateInput;
  connect?: BookWhereUniqueInput;
}

export interface BookUpdateWithoutAuthorsDataInput {
  title?: String;
  description?: String;
  publishers?: PublisherUpdateManyWithoutPublicationInput;
  pages?: Int;
  publishDateTime?: DateTimeInput;
  ratings?: RatingUpdateManyWithoutBookInput;
  isbnNo?: Int;
}

export interface RatingCreateWithoutBookInput {
  rating: Int;
  rater: UserCreateOneInput;
}

export interface BookUpsertWithWhereUniqueWithoutAuthorsInput {
  where: BookWhereUniqueInput;
  update: BookUpdateWithoutAuthorsDataInput;
  create: BookCreateWithoutAuthorsInput;
}

export interface UserCreateInput {
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  books?: BookCreateManyWithoutAuthorsInput;
  reviews?: ReviewCreateManyWithoutReviewerInput;
}

export interface BookScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  pages?: Int;
  pages_not?: Int;
  pages_in?: Int[] | Int;
  pages_not_in?: Int[] | Int;
  pages_lt?: Int;
  pages_lte?: Int;
  pages_gt?: Int;
  pages_gte?: Int;
  publishDateTime?: DateTimeInput;
  publishDateTime_not?: DateTimeInput;
  publishDateTime_in?: DateTimeInput[] | DateTimeInput;
  publishDateTime_not_in?: DateTimeInput[] | DateTimeInput;
  publishDateTime_lt?: DateTimeInput;
  publishDateTime_lte?: DateTimeInput;
  publishDateTime_gt?: DateTimeInput;
  publishDateTime_gte?: DateTimeInput;
  isbnNo?: Int;
  isbnNo_not?: Int;
  isbnNo_in?: Int[] | Int;
  isbnNo_not_in?: Int[] | Int;
  isbnNo_lt?: Int;
  isbnNo_lte?: Int;
  isbnNo_gt?: Int;
  isbnNo_gte?: Int;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: BookScalarWhereInput[] | BookScalarWhereInput;
  OR?: BookScalarWhereInput[] | BookScalarWhereInput;
  NOT?: BookScalarWhereInput[] | BookScalarWhereInput;
}

export interface BookCreateWithoutAuthorsInput {
  title: String;
  description?: String;
  publishers?: PublisherCreateManyWithoutPublicationInput;
  pages?: Int;
  publishDateTime: DateTimeInput;
  ratings?: RatingCreateManyWithoutBookInput;
  isbnNo?: Int;
}

export interface BookUpdateManyWithWhereNestedInput {
  where: BookScalarWhereInput;
  data: BookUpdateManyDataInput;
}

export interface PublisherUpdateManyWithoutPublicationInput {
  create?:
    | PublisherCreateWithoutPublicationInput[]
    | PublisherCreateWithoutPublicationInput;
  delete?: PublisherWhereUniqueInput[] | PublisherWhereUniqueInput;
  connect?: PublisherWhereUniqueInput[] | PublisherWhereUniqueInput;
  disconnect?: PublisherWhereUniqueInput[] | PublisherWhereUniqueInput;
  update?:
    | PublisherUpdateWithWhereUniqueWithoutPublicationInput[]
    | PublisherUpdateWithWhereUniqueWithoutPublicationInput;
  upsert?:
    | PublisherUpsertWithWhereUniqueWithoutPublicationInput[]
    | PublisherUpsertWithWhereUniqueWithoutPublicationInput;
  deleteMany?: PublisherScalarWhereInput[] | PublisherScalarWhereInput;
  updateMany?:
    | PublisherUpdateManyWithWhereNestedInput[]
    | PublisherUpdateManyWithWhereNestedInput;
}

export interface BookUpdateManyDataInput {
  title?: String;
  description?: String;
  pages?: Int;
  publishDateTime?: DateTimeInput;
  isbnNo?: Int;
}

export interface PublisherUpdateWithoutPublicationDataInput {
  name?: String;
  about?: String;
  address?: String;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface PublisherWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  about?: String;
  about_not?: String;
  about_in?: String[] | String;
  about_not_in?: String[] | String;
  about_lt?: String;
  about_lte?: String;
  about_gt?: String;
  about_gte?: String;
  about_contains?: String;
  about_not_contains?: String;
  about_starts_with?: String;
  about_not_starts_with?: String;
  about_ends_with?: String;
  about_not_ends_with?: String;
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  publication_every?: BookWhereInput;
  publication_some?: BookWhereInput;
  publication_none?: BookWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: PublisherWhereInput[] | PublisherWhereInput;
  OR?: PublisherWhereInput[] | PublisherWhereInput;
  NOT?: PublisherWhereInput[] | PublisherWhereInput;
}

export interface RatingUpsertWithWhereUniqueWithoutBookInput {
  where: RatingWhereUniqueInput;
  update: RatingUpdateWithoutBookDataInput;
  create: RatingCreateWithoutBookInput;
}

export interface BookSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: BookWhereInput;
  AND?: BookSubscriptionWhereInput[] | BookSubscriptionWhereInput;
  OR?: BookSubscriptionWhereInput[] | BookSubscriptionWhereInput;
  NOT?: BookSubscriptionWhereInput[] | BookSubscriptionWhereInput;
}

export interface RatingScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  rating?: Int;
  rating_not?: Int;
  rating_in?: Int[] | Int;
  rating_not_in?: Int[] | Int;
  rating_lt?: Int;
  rating_lte?: Int;
  rating_gt?: Int;
  rating_gte?: Int;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: RatingScalarWhereInput[] | RatingScalarWhereInput;
  OR?: RatingScalarWhereInput[] | RatingScalarWhereInput;
  NOT?: RatingScalarWhereInput[] | RatingScalarWhereInput;
}

export interface UserUpsertWithoutReviewsInput {
  update: UserUpdateWithoutReviewsDataInput;
  create: UserCreateWithoutReviewsInput;
}

export interface RatingUpdateManyWithWhereNestedInput {
  where: RatingScalarWhereInput;
  data: RatingUpdateManyDataInput;
}

export interface ReviewUpdateInput {
  review?: String;
  reviewer?: UserUpdateOneRequiredWithoutReviewsInput;
  book?: BookUpdateOneRequiredInput;
}

export interface RatingUpdateManyDataInput {
  rating?: Int;
}

export interface ReviewCreateInput {
  review: String;
  reviewer: UserCreateOneWithoutReviewsInput;
  book: BookCreateOneInput;
}

export interface BookUpsertNestedInput {
  update: BookUpdateDataInput;
  create: BookCreateInput;
}

export interface BookUpdateWithoutRatingsDataInput {
  title?: String;
  description?: String;
  publishers?: PublisherUpdateManyWithoutPublicationInput;
  pages?: Int;
  publishDateTime?: DateTimeInput;
  authors?: UserUpdateManyWithoutBooksInput;
  isbnNo?: Int;
}

export interface ReviewUpsertWithWhereUniqueWithoutReviewerInput {
  where: ReviewWhereUniqueInput;
  update: ReviewUpdateWithoutReviewerDataInput;
  create: ReviewCreateWithoutReviewerInput;
}

export interface BookCreateWithoutRatingsInput {
  title: String;
  description?: String;
  publishers?: PublisherCreateManyWithoutPublicationInput;
  pages?: Int;
  publishDateTime: DateTimeInput;
  authors?: UserCreateManyWithoutBooksInput;
  isbnNo?: Int;
}

export interface ReviewScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  review?: String;
  review_not?: String;
  review_in?: String[] | String;
  review_not_in?: String[] | String;
  review_lt?: String;
  review_lte?: String;
  review_gt?: String;
  review_gte?: String;
  review_contains?: String;
  review_not_contains?: String;
  review_starts_with?: String;
  review_not_starts_with?: String;
  review_ends_with?: String;
  review_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: ReviewScalarWhereInput[] | ReviewScalarWhereInput;
  OR?: ReviewScalarWhereInput[] | ReviewScalarWhereInput;
  NOT?: ReviewScalarWhereInput[] | ReviewScalarWhereInput;
}

export interface PublisherCreateWithoutPublicationInput {
  name: String;
  about?: String;
  address?: String;
}

export interface ReviewUpdateManyWithWhereNestedInput {
  where: ReviewScalarWhereInput;
  data: ReviewUpdateManyDataInput;
}

export interface ReviewCreateWithoutReviewerInput {
  review: String;
  book: BookCreateOneInput;
}

export interface ReviewUpdateManyDataInput {
  review?: String;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpsertWithWhereUniqueWithoutBooksInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutBooksDataInput;
  create: UserCreateWithoutBooksInput;
}

export interface BookUpdateInput {
  title?: String;
  description?: String;
  publishers?: PublisherUpdateManyWithoutPublicationInput;
  pages?: Int;
  publishDateTime?: DateTimeInput;
  authors?: UserUpdateManyWithoutBooksInput;
  ratings?: RatingUpdateManyWithoutBookInput;
  isbnNo?: Int;
}

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface BookWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  publishers_every?: PublisherWhereInput;
  publishers_some?: PublisherWhereInput;
  publishers_none?: PublisherWhereInput;
  pages?: Int;
  pages_not?: Int;
  pages_in?: Int[] | Int;
  pages_not_in?: Int[] | Int;
  pages_lt?: Int;
  pages_lte?: Int;
  pages_gt?: Int;
  pages_gte?: Int;
  publishDateTime?: DateTimeInput;
  publishDateTime_not?: DateTimeInput;
  publishDateTime_in?: DateTimeInput[] | DateTimeInput;
  publishDateTime_not_in?: DateTimeInput[] | DateTimeInput;
  publishDateTime_lt?: DateTimeInput;
  publishDateTime_lte?: DateTimeInput;
  publishDateTime_gt?: DateTimeInput;
  publishDateTime_gte?: DateTimeInput;
  authors_every?: UserWhereInput;
  authors_some?: UserWhereInput;
  authors_none?: UserWhereInput;
  ratings_every?: RatingWhereInput;
  ratings_some?: RatingWhereInput;
  ratings_none?: RatingWhereInput;
  isbnNo?: Int;
  isbnNo_not?: Int;
  isbnNo_in?: Int[] | Int;
  isbnNo_not_in?: Int[] | Int;
  isbnNo_lt?: Int;
  isbnNo_lte?: Int;
  isbnNo_gt?: Int;
  isbnNo_gte?: Int;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: BookWhereInput[] | BookWhereInput;
  OR?: BookWhereInput[] | BookWhereInput;
  NOT?: BookWhereInput[] | BookWhereInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateInput {
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
  books?: BookUpdateManyWithoutAuthorsInput;
  reviews?: ReviewUpdateManyWithoutReviewerInput;
}

export interface UserUpdateManyDataInput {
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
}

export interface UserCreateWithoutReviewsInput {
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  books?: BookCreateManyWithoutAuthorsInput;
}

export interface BookUpdateManyMutationInput {
  title?: String;
  description?: String;
  pages?: Int;
  publishDateTime?: DateTimeInput;
  isbnNo?: Int;
}

export interface BookUpdateOneRequiredWithoutRatingsInput {
  create?: BookCreateWithoutRatingsInput;
  update?: BookUpdateWithoutRatingsDataInput;
  upsert?: BookUpsertWithoutRatingsInput;
  connect?: BookWhereUniqueInput;
}

export interface BookUpsertWithWhereUniqueWithoutPublishersInput {
  where: BookWhereUniqueInput;
  update: BookUpdateWithoutPublishersDataInput;
  create: BookCreateWithoutPublishersInput;
}

export interface UserCreateWithoutBooksInput {
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  reviews?: ReviewCreateManyWithoutReviewerInput;
}

export interface BookUpdateWithoutPublishersDataInput {
  title?: String;
  description?: String;
  pages?: Int;
  publishDateTime?: DateTimeInput;
  authors?: UserUpdateManyWithoutBooksInput;
  ratings?: RatingUpdateManyWithoutBookInput;
  isbnNo?: Int;
}

export interface BookCreateManyWithoutAuthorsInput {
  create?: BookCreateWithoutAuthorsInput[] | BookCreateWithoutAuthorsInput;
  connect?: BookWhereUniqueInput[] | BookWhereUniqueInput;
}

export interface PublisherCreateInput {
  name: String;
  about?: String;
  address?: String;
  publication?: BookCreateManyWithoutPublishersInput;
}

export interface RatingSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: RatingWhereInput;
  AND?: RatingSubscriptionWhereInput[] | RatingSubscriptionWhereInput;
  OR?: RatingSubscriptionWhereInput[] | RatingSubscriptionWhereInput;
  NOT?: RatingSubscriptionWhereInput[] | RatingSubscriptionWhereInput;
}

export interface BookUpdateManyWithoutPublishersInput {
  create?:
    | BookCreateWithoutPublishersInput[]
    | BookCreateWithoutPublishersInput;
  delete?: BookWhereUniqueInput[] | BookWhereUniqueInput;
  connect?: BookWhereUniqueInput[] | BookWhereUniqueInput;
  disconnect?: BookWhereUniqueInput[] | BookWhereUniqueInput;
  update?:
    | BookUpdateWithWhereUniqueWithoutPublishersInput[]
    | BookUpdateWithWhereUniqueWithoutPublishersInput;
  upsert?:
    | BookUpsertWithWhereUniqueWithoutPublishersInput[]
    | BookUpsertWithWhereUniqueWithoutPublishersInput;
  deleteMany?: BookScalarWhereInput[] | BookScalarWhereInput;
  updateMany?:
    | BookUpdateManyWithWhereNestedInput[]
    | BookUpdateManyWithWhereNestedInput;
}

export interface PublisherUpdateInput {
  name?: String;
  about?: String;
  address?: String;
  publication?: BookUpdateManyWithoutPublishersInput;
}

export interface BookCreateWithoutPublishersInput {
  title: String;
  description?: String;
  pages?: Int;
  publishDateTime: DateTimeInput;
  authors?: UserCreateManyWithoutBooksInput;
  ratings?: RatingCreateManyWithoutBookInput;
  isbnNo?: Int;
}

export interface BookCreateManyWithoutPublishersInput {
  create?:
    | BookCreateWithoutPublishersInput[]
    | BookCreateWithoutPublishersInput;
  connect?: BookWhereUniqueInput[] | BookWhereUniqueInput;
}

export interface UserUpdateWithoutReviewsDataInput {
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
  books?: BookUpdateManyWithoutAuthorsInput;
}

export interface PublisherUpdateWithWhereUniqueWithoutPublicationInput {
  where: PublisherWhereUniqueInput;
  data: PublisherUpdateWithoutPublicationDataInput;
}

export interface RatingCreateManyWithoutBookInput {
  create?: RatingCreateWithoutBookInput[] | RatingCreateWithoutBookInput;
  connect?: RatingWhereUniqueInput[] | RatingWhereUniqueInput;
}

export interface BookCreateInput {
  title: String;
  description?: String;
  publishers?: PublisherCreateManyWithoutPublicationInput;
  pages?: Int;
  publishDateTime: DateTimeInput;
  authors?: UserCreateManyWithoutBooksInput;
  ratings?: RatingCreateManyWithoutBookInput;
  isbnNo?: Int;
}

export interface RatingUpdateManyMutationInput {
  rating?: Int;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BookEdge {
  node: Book;
  cursor: String;
}

export interface BookEdgePromise extends Promise<BookEdge>, Fragmentable {
  node: <T = BookPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BookEdgeSubscription
  extends Promise<AsyncIterator<BookEdge>>,
    Fragmentable {
  node: <T = BookSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Publisher {
  id: ID_Output;
  name: String;
  about?: String;
  address?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PublisherPromise extends Promise<Publisher>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  about: () => Promise<String>;
  address: () => Promise<String>;
  publication: <T = FragmentableArray<Book>>(
    args?: {
      where?: BookWhereInput;
      orderBy?: BookOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PublisherSubscription
  extends Promise<AsyncIterator<Publisher>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  about: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  publication: <T = Promise<AsyncIterator<BookSubscription>>>(
    args?: {
      where?: BookWhereInput;
      orderBy?: BookOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ReviewSubscriptionPayload {
  mutation: MutationType;
  node: Review;
  updatedFields: String[];
  previousValues: ReviewPreviousValues;
}

export interface ReviewSubscriptionPayloadPromise
  extends Promise<ReviewSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReviewPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReviewPreviousValuesPromise>() => T;
}

export interface ReviewSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReviewSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReviewSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReviewPreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  firstName: String;
  lastName: String;
  email: String;
  password: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  books: <T = FragmentableArray<Book>>(
    args?: {
      where?: BookWhereInput;
      orderBy?: BookOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  reviews: <T = FragmentableArray<Review>>(
    args?: {
      where?: ReviewWhereInput;
      orderBy?: ReviewOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  books: <T = Promise<AsyncIterator<BookSubscription>>>(
    args?: {
      where?: BookWhereInput;
      orderBy?: BookOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  reviews: <T = Promise<AsyncIterator<ReviewSubscription>>>(
    args?: {
      where?: ReviewWhereInput;
      orderBy?: ReviewOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface BookConnection {
  pageInfo: PageInfo;
  edges: BookEdge[];
}

export interface BookConnectionPromise
  extends Promise<BookConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BookEdge>>() => T;
  aggregate: <T = AggregateBookPromise>() => T;
}

export interface BookConnectionSubscription
  extends Promise<AsyncIterator<BookConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BookEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBookSubscription>() => T;
}

export interface ReviewEdge {
  node: Review;
  cursor: String;
}

export interface ReviewEdgePromise extends Promise<ReviewEdge>, Fragmentable {
  node: <T = ReviewPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReviewEdgeSubscription
  extends Promise<AsyncIterator<ReviewEdge>>,
    Fragmentable {
  node: <T = ReviewSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Book {
  id: ID_Output;
  title: String;
  description?: String;
  pages?: Int;
  publishDateTime: DateTimeOutput;
  isbnNo?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface BookPromise extends Promise<Book>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  publishers: <T = FragmentableArray<Publisher>>(
    args?: {
      where?: PublisherWhereInput;
      orderBy?: PublisherOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  pages: () => Promise<Int>;
  publishDateTime: () => Promise<DateTimeOutput>;
  authors: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  ratings: <T = FragmentableArray<Rating>>(
    args?: {
      where?: RatingWhereInput;
      orderBy?: RatingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  isbnNo: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BookSubscription
  extends Promise<AsyncIterator<Book>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  publishers: <T = Promise<AsyncIterator<PublisherSubscription>>>(
    args?: {
      where?: PublisherWhereInput;
      orderBy?: PublisherOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  pages: () => Promise<AsyncIterator<Int>>;
  publishDateTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  authors: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  ratings: <T = Promise<AsyncIterator<RatingSubscription>>>(
    args?: {
      where?: RatingWhereInput;
      orderBy?: RatingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  isbnNo: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateRating {
  count: Int;
}

export interface AggregateRatingPromise
  extends Promise<AggregateRating>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRatingSubscription
  extends Promise<AsyncIterator<AggregateRating>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BookSubscriptionPayload {
  mutation: MutationType;
  node: Book;
  updatedFields: String[];
  previousValues: BookPreviousValues;
}

export interface BookSubscriptionPayloadPromise
  extends Promise<BookSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BookPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BookPreviousValuesPromise>() => T;
}

export interface BookSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BookSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BookSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BookPreviousValuesSubscription>() => T;
}

export interface RatingConnection {
  pageInfo: PageInfo;
  edges: RatingEdge[];
}

export interface RatingConnectionPromise
  extends Promise<RatingConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RatingEdge>>() => T;
  aggregate: <T = AggregateRatingPromise>() => T;
}

export interface RatingConnectionSubscription
  extends Promise<AsyncIterator<RatingConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RatingEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRatingSubscription>() => T;
}

export interface BookPreviousValues {
  id: ID_Output;
  title: String;
  description?: String;
  pages?: Int;
  publishDateTime: DateTimeOutput;
  isbnNo?: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface BookPreviousValuesPromise
  extends Promise<BookPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  pages: () => Promise<Int>;
  publishDateTime: () => Promise<DateTimeOutput>;
  isbnNo: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BookPreviousValuesSubscription
  extends Promise<AsyncIterator<BookPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  pages: () => Promise<AsyncIterator<Int>>;
  publishDateTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  isbnNo: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PublisherEdge {
  node: Publisher;
  cursor: String;
}

export interface PublisherEdgePromise
  extends Promise<PublisherEdge>,
    Fragmentable {
  node: <T = PublisherPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PublisherEdgeSubscription
  extends Promise<AsyncIterator<PublisherEdge>>,
    Fragmentable {
  node: <T = PublisherSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Rating {
  id: ID_Output;
  rating: Int;
  createdAt: DateTimeOutput;
}

export interface RatingPromise extends Promise<Rating>, Fragmentable {
  id: () => Promise<ID_Output>;
  rating: () => Promise<Int>;
  rater: <T = UserPromise>() => T;
  book: <T = BookPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface RatingSubscription
  extends Promise<AsyncIterator<Rating>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  rating: () => Promise<AsyncIterator<Int>>;
  rater: <T = UserSubscription>() => T;
  book: <T = BookSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateBook {
  count: Int;
}

export interface AggregateBookPromise
  extends Promise<AggregateBook>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBookSubscription
  extends Promise<AsyncIterator<AggregateBook>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PublisherSubscriptionPayload {
  mutation: MutationType;
  node: Publisher;
  updatedFields: String[];
  previousValues: PublisherPreviousValues;
}

export interface PublisherSubscriptionPayloadPromise
  extends Promise<PublisherSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PublisherPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PublisherPreviousValuesPromise>() => T;
}

export interface PublisherSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PublisherSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PublisherSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PublisherPreviousValuesSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PublisherPreviousValues {
  id: ID_Output;
  name: String;
  about?: String;
  address?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PublisherPreviousValuesPromise
  extends Promise<PublisherPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  about: () => Promise<String>;
  address: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PublisherPreviousValuesSubscription
  extends Promise<AsyncIterator<PublisherPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  about: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ReviewConnection {
  pageInfo: PageInfo;
  edges: ReviewEdge[];
}

export interface ReviewConnectionPromise
  extends Promise<ReviewConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReviewEdge>>() => T;
  aggregate: <T = AggregateReviewPromise>() => T;
}

export interface ReviewConnectionSubscription
  extends Promise<AsyncIterator<ReviewConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReviewEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReviewSubscription>() => T;
}

export interface Review {
  id: ID_Output;
  review: String;
  createdAt: DateTimeOutput;
}

export interface ReviewPromise extends Promise<Review>, Fragmentable {
  id: () => Promise<ID_Output>;
  review: () => Promise<String>;
  reviewer: <T = UserPromise>() => T;
  book: <T = BookPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ReviewSubscription
  extends Promise<AsyncIterator<Review>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  review: () => Promise<AsyncIterator<String>>;
  reviewer: <T = UserSubscription>() => T;
  book: <T = BookSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RatingPreviousValues {
  id: ID_Output;
  rating: Int;
  createdAt: DateTimeOutput;
}

export interface RatingPreviousValuesPromise
  extends Promise<RatingPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  rating: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface RatingPreviousValuesSubscription
  extends Promise<AsyncIterator<RatingPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  rating: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RatingSubscriptionPayload {
  mutation: MutationType;
  node: Rating;
  updatedFields: String[];
  previousValues: RatingPreviousValues;
}

export interface RatingSubscriptionPayloadPromise
  extends Promise<RatingSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RatingPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RatingPreviousValuesPromise>() => T;
}

export interface RatingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RatingSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RatingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RatingPreviousValuesSubscription>() => T;
}

export interface ReviewPreviousValues {
  id: ID_Output;
  review: String;
  createdAt: DateTimeOutput;
}

export interface ReviewPreviousValuesPromise
  extends Promise<ReviewPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  review: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ReviewPreviousValuesSubscription
  extends Promise<AsyncIterator<ReviewPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  review: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RatingEdge {
  node: Rating;
  cursor: String;
}

export interface RatingEdgePromise extends Promise<RatingEdge>, Fragmentable {
  node: <T = RatingPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RatingEdgeSubscription
  extends Promise<AsyncIterator<RatingEdge>>,
    Fragmentable {
  node: <T = RatingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateReview {
  count: Int;
}

export interface AggregateReviewPromise
  extends Promise<AggregateReview>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReviewSubscription
  extends Promise<AsyncIterator<AggregateReview>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface PublisherConnection {
  pageInfo: PageInfo;
  edges: PublisherEdge[];
}

export interface PublisherConnectionPromise
  extends Promise<PublisherConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PublisherEdge>>() => T;
  aggregate: <T = AggregatePublisherPromise>() => T;
}

export interface PublisherConnectionSubscription
  extends Promise<AsyncIterator<PublisherConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PublisherEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePublisherSubscription>() => T;
}

export interface AggregatePublisher {
  count: Int;
}

export interface AggregatePublisherPromise
  extends Promise<AggregatePublisher>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePublisherSubscription
  extends Promise<AsyncIterator<AggregatePublisher>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Book",
    embedded: false
  },
  {
    name: "Publisher",
    embedded: false
  },
  {
    name: "Rating",
    embedded: false
  },
  {
    name: "Review",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4467`
});
export const prisma = new Prisma();
